{"version":3,"sources":["components/Navbar.js","components/Articles.js","components/Export.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","state","handleToggle","className","Component","Articles","articles","reverse","map","article","key","title","id","contentFields","item","index","dangerouslySetInnerHTML","__html","value","data","ExcelFile","ReactExport","ExcelSheet","ExcelColumn","Export","filename","element","type","name","label","numFmt","App","props","handleSubmit","bind","statusMessage","firstLoad","this","length","onSubmit","onClick","getNext","console","log","event","stripHtmlChars","getHeaders","languageId","get","Headers","base64","encode","username","html","tmp","document","createElement","innerHTML","textContent","innerText","preventDefault","FormData","target","setState","structureId","headers","url","requestOptions","method","redirect","fetch","mode","then","res","json","result","exception","items","index1","contentField","index2","bodyContent","catch","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.d02ddfa9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Navbar extends Component {\n  state = {\n    //isOpen: false,\n  };\n\n  handleToggle = () => {\n    //this.setState({ isOpen: !this.state.isOpen });\n  };\n\n  render() {\n    return (\n\n        <div className=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-white border-bottom box-shadow\">\n          <h5 className=\"my-0 mr-md-auto font-weight-normal\"><b>Liferay OpenAPI</b> > Custom React Article Dashboard</h5>\n          <nav className=\"my-2 my-md-0 mr-md-3\">\n          </nav>\n        </div>\n    );\n  }\n}\n","import React from 'react'\n\nconst Articles = ({ articles }) => {\n  return (\n    <div>\n       {articles.reverse().map(article => (\n\n          <div className=\"card\" key={article.key}>\n            <div className=\"card-body\">\n              <h6 className=\"card-title\">{article.title} ({article.id})</h6>\n              <div className=\"card-text\">\n\n                {article.contentFields.map((item, index) => (\n                  <span key=\"{index}\" dangerouslySetInnerHTML={{__html: item.value.data}} />\n                ))}\n\n              </div>\n            </div>\n          </div>\n\n        ))}\n    </div>\n  )\n};\n\nexport default Articles","import React from 'react'\nimport ReactExport from \"react-export-excel\";\n\nconst ExcelFile = ReactExport.ExcelFile;\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\n\nconst Export = ({ articles }) => {\n  return (\n      <ExcelFile filename=\"Articles\" element={<button  type=\"submit\" className=\"btn btn-lg btn-block btn-outline-primary\">Export Data</button>}>\n          <ExcelSheet data={articles} name=\"Articles\">\n              <ExcelColumn label=\"Article ID\" value=\"id\"/>\n              <ExcelColumn label=\"Title\" value=\"title\"/>\n              <ExcelColumn label=\"Friendly URL\" value=\"friendlyUrlPath\"/>\n              <ExcelColumn label=\"Content\" value=\"bodyContent\"/>\n              <ExcelColumn label=\"Create Date\" numFmt=\"m/dd/yy H:MM:SS\" value=\"dateCreated\"/>\n              <ExcelColumn label=\"Modified Date\" numFmt=\"m/dd/yy H:MM:SS\" value=\"dateModified\"/>\n          </ExcelSheet>\n      </ExcelFile>\n\n  )\n};\n\nexport default Export","import React from 'react';\nimport base64 from 'react-native-base64'\nimport Navbar from \"./components/Navbar\";\nimport Articles from \"./components/Articles\";\nimport Export from \"./components/Export\";\n\nimport './App.css';\n\nconst username = 'test';\nconst password = 'test';\n\nclass App extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.state = { \n      articles: [],\n      statusMessage: '',\n      firstLoad: true\n    }\n  }\n  componentDidMount() {\n    //handleSubmit(\"load\");\n  }\n\n  render() {\n    let statusMessage = '';\n\n    if(this.state.firstLoad!==true && this.state.statusMessage!==''){\n       statusMessage = \"Article not found\";\n    } else if (this.state.articles.length===0) {\n       statusMessage = \"Search for articles\";\n    }\n\n    return (\n        <div className=\"App\">\n          \n          <Navbar/>\n\n          <div className=\"container-fluid\">\n            \n            <div className=\"row\">\n              <div className=\"col-sm-4\">\n\n                <div className=\"card\">\n                  <div className=\"card-header\">\n                    <h5 className=\"my-0 font-weight-normal center\">Article Lookup</h5>\n                  </div>\n\n                  <div className=\"card-body\">\n                    <form onSubmit={this.handleSubmit}>\n\n                      <div className=\"form-group\">\n                         <label>Site: SecureKey Portal</label>\n                      </div>\n\n                      <div className=\"form-group\">\n                        <label>Content Structure Type:</label>\n                        <select className=\"form-control\"  name=\"contentStuctureId\">\n                          <option value=\"99155\">Basic Website Content</option>\n                        </select>\n                      </div>\n\n                      <div className=\"form-group\">\n                        <label>Article Language:</label>\n\n                        <select className=\"form-control\" name=\"journalLanguageId\">\n                          <option value=\"en-US\">en-US</option>\n                          <option value=\"fr-CA\">fr-CA</option>\n                        </select>\n                      </div>\n\n                      <button type=\"submit\" className=\"btn btn-lg btn-block btn-outline-primary\" onClick={this.props.getNext}>Request Article</button>\n                    \n                    </form>\n\n                  </div>\n                </div>\n\n                <div className=\"card\">\n                  <div className=\"card-header\">\n                    <h5 className=\"my-0 font-weight-normal center\">Options</h5>\n                  </div>\n\n                  <div className=\"card-body\">\n\n                    <Export articles={this.state.articles}/>\n\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"col-sm-8\">\n\n              {statusMessage.length>0 ? (\n\n                  <div className=\"card center\">\n                    <div className=\"card-body\">\n                      <i>{statusMessage}</i>\n                    </div>\n                  </div>\n\n                ) : (\n\n                  <Articles articles={this.state.articles}/>\n\n                )\n              }\n\n              </div>\n            </div>\n          </div>\n        </div>\n    );\n  }\n\n  async loadSites(){\n    console.log(\"loading\")\n  }\n\n  async loadStructures(){\n    \n  }\n\n  async handleSubmit(event) {\n\n    event.preventDefault();\n\n    const data = new FormData(event.target);\n\n    this.setState({\n       firstLoad: false\n    });\n    \n    let structureId = data.get('contentStuctureId')\n\n    let headers = getHeaders(data)\n\n    let domain_url = \"\"\n    let url =\n      domain_url +\n      \"/o/headless-delivery/v1.0/content-structures/\" +\n      structureId +\n      \"/structured-contents\";\n\n    var requestOptions = {\n      method: \"GET\",\n      headers: headers,\n      redirect: \"follow\",\n    };\n    \n    await fetch(url, requestOptions, {\n      mode: \"no-cors\", \n    })   \n      .then(res => res.json())\n      .then(\n        (result) => {\n          if(result.exception){\n            this.setState({\n              statusMessage:result.exception\n            });\n          } else {\n            \n            result.items.map((item, index1) => (\n                item.contentFields.map((contentField, index2) => (\n                    item.bodyContent = stripHtmlChars(contentField.value.data)\n                ))\n            ))\n\n            this.setState({\n              articles: result.items\n            });\n          }\n        }\n      )\n      .catch(console.log);\n\n    function stripHtmlChars(html){\n       var tmp = document.createElement(\"DIV\");\n       tmp.innerHTML = html;\n       return tmp.textContent || tmp.innerText || \"\";\n    }\n\n    function getHeaders(data){\n\n      let languageId = data.get('journalLanguageId');\n\n      let headers = new Headers({ \n        'Accept': 'application/json',\n        'Authorization': 'Basic ' + base64.encode(username + \":\" + password),\n        'Accept-Language': languageId\n      });\n\n      return headers;\n\n    }\n\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}